type: edu
files:
  - name: src/blockchain/Main.java
    visible: true
    text: |
      package blockchain;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/BlockchainTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.stream.Collectors;
      
      
      class BlockParseException extends Exception {
          BlockParseException(String msg) {
              super(msg);
          }
      }
      
      
      class Block {
      
          int id;
          long timestamp;
          long magic;
          String hashprev;
          String hash;
      
          static Block parseBlock(String strBlock) throws BlockParseException {
              if (strBlock.length() == 0) {
                  return null;
              }
      
              if (!(strBlock.contains("Block:")
                  && strBlock.contains("Timestamp:"))) {
      
                  return null;
              }
      
              Block block = new Block();
      
              List<String> lines = strBlock
                  .lines()
                  .map(String::strip)
                  .filter(e -> e.length() > 0)
                  .collect(Collectors.toList());
      
              if (lines.size() != 9) {
                  throw new BlockParseException("Every block should " +
                      "contain 9 lines of data");
              }
      
              if (!lines.get(0).equals("Block:")) {
                  throw new BlockParseException("First line of every block " +
                      "should be \"Block:\"");
              }
      
              if (!lines.get(1).startsWith("Id:")) {
                  throw new BlockParseException("Second line of every block " +
                      "should start with \"Id:\"");
              }
      
              String id = lines.get(1).split(":")[1]
                  .strip().replace("-", "");
              boolean isNumeric = id.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Id should be a number");
              }
      
              block.id = Integer.parseInt(id);
      
      
      
              if (!lines.get(2).startsWith("Timestamp:")) {
                  throw new BlockParseException("Third line of every block " +
                      "should start with \"Timestamp:\"");
              }
      
              String timestamp = lines.get(2).split(":")[1]
                  .strip().replace("-", "");
              isNumeric = timestamp.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Timestamp should be a number");
              }
      
              block.timestamp = Long.parseLong(timestamp);
      
      
              if (!lines.get(3).startsWith("Magic number:")) {
                  throw new BlockParseException("4-th line of every block " +
                      "should start with \"Magic number:\"");
              }
      
              String magic = lines.get(3).split(":")[1]
                  .strip().replace("-", "");
              isNumeric = magic.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Timestamp should be a number");
              }
      
              block.magic = Long.parseLong(magic);
      
      
      
              if (!lines.get(4).equals("Hash of the previous block:")) {
                  throw new BlockParseException("5-th line of every block " +
                      "should be \"Hash of the previous block:\"");
              }
      
              if (!lines.get(6).equals("Hash of the block:")) {
                  throw new BlockParseException("7-th line of every block " +
                      "should be \"Hash of the block:\"");
              }
      
              String prevhash = lines.get(5).strip();
              String hash = lines.get(7).strip();
      
              if (!(prevhash.length() == 64 || prevhash.equals("0"))
                  || !(hash.length() == 64)) {
      
                  throw new BlockParseException("Hash length should " +
                      "be equal to 64 except \"0\"");
              }
      
              block.hash = hash;
              block.hashprev = prevhash;
      
              return block;
          }
      
      
          static List<Block> parseBlocks(String output) throws BlockParseException {
              String[] strBlocks = output.substring(
                  output.indexOf("Block:")).split("\n\n");
      
              List<Block> blocks = new ArrayList<>();
      
              for (String strBlock : strBlocks) {
                  Block block = parseBlock(strBlock.strip());
                  if (block != null) {
                      blocks.add(block);
                  }
              }
      
              return blocks;
          }
      }
      
      class Clue {
          String zeros;
          Clue(int n) {
              zeros = "0".repeat(n);
          }
      }
      
      
      public class BlockchainTest extends StageTest<Clue> {
      
          List<String> previousOutputs = new ArrayList<>();
      
          @Override
          public List<TestCase<Clue>> generate() {
              return List.of(
                  new TestCase<Clue>().setInput("0").setAttach(new Clue(0)),
                  new TestCase<Clue>().setInput("1").setAttach(new Clue(1)),
                  new TestCase<Clue>().setInput("2").setAttach(new Clue(2)),
                  new TestCase<Clue>().setInput("0").setAttach(new Clue(0)),
                  new TestCase<Clue>().setInput("1").setAttach(new Clue(1)),
                  new TestCase<Clue>().setInput("2").setAttach(new Clue(2))
              );
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              if (previousOutputs.contains(reply)) {
                  return new CheckResult(false,
                      "You already printed this text in the previous tests");
              }
      
              previousOutputs.add(reply);
      
              List<Block> blocks;
              try {
                  blocks = Block.parseBlocks(reply);
              } catch (BlockParseException ex) {
                  return new CheckResult(false, ex.getMessage());
              } catch (Exception ex) {
                  return CheckResult.wrong("");
              }
      
              if (blocks.size() != 5) {
                  return new CheckResult(false,
                      "You should output 5 blocks, found " + blocks.size());
              }
      
              for (int i = 1; i < blocks.size(); i++) {
                  Block curr = blocks.get(i - 1);
                  Block next = blocks.get(i);
      
                  if (curr.id + 1 != next.id) {
                      return new CheckResult(false,
                          "Id`s of blocks should increase by 1");
                  }
      
                  if (next.timestamp < curr.timestamp) {
                      return new CheckResult(false,
                          "Timestamp`s of blocks should increase");
                  }
      
                  if (!next.hashprev.equals(curr.hash)) {
                      return new CheckResult(false, "Two hashes aren't equal, " +
                          "but should");
                  }
      
                  if (!next.hash.startsWith(clue.zeros)) {
                      return new CheckResult(false,
                          "Hash should start with some zeros");
                  }
              }
      
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/blockchain/domain/Block.java
    visible: true
    text: |
      package blockchain.domain;
      
      import java.sql.Timestamp;
      import java.time.Instant;
      
      /** Class representing a block in the blockchain. */
      public class Block {
        private int id;
        private long timeStamp;
        private String hash;
        private String previousHash;
        private int magicNumber;
        private int minerId;
        private Block next;
      
        public Block(int id, String hash, String previousHash, int magicNumber, int minerId) {
          this.id = id;
          this.timeStamp = Timestamp.from(Instant.now()).getTime();
          this.hash = hash;
          this.previousHash = previousHash;
          this.magicNumber = magicNumber;
          this.minerId = minerId;
          this.next = null;
        }
      
        public int getId() {
          return id;
        }
      
        public long getTimeStamp() {
          return timeStamp;
        }
      
        public String getHash() {
          return hash;
        }
      
        public String getPreviousHash() {
          return previousHash;
        }
      
        public int getMagicNumber() {
          return magicNumber;
        }
      
        public int getMinerId() {
          return minerId;
        }
      
        public Block getNext() {
          return next;
        }
      
        public void setNext(Block next) {
          this.next = next;
        }
      
        public void setPreviousHash(String previousHash) {
          this.previousHash = previousHash;
        }
      
        @Override
        public String toString() {
          return "Block:\n"
              + "Id: "
              + id
              + "\n"
              + "Timestamp: "
              + timeStamp
              + "\n"
              + "Hash of the previous block:\n"
              + previousHash
              + "\n"
              + "Hash of the block:\n"
              + hash
              + "\n";
        }
      }
    learner_created: true
  - name: src/blockchain/utils/StringUtil.java
    visible: true
    text: |
      package blockchain.utils;
      
      import java.security.MessageDigest;
      
      public class StringUtil {
        public static String applySha256(String input) {
          try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(input.getBytes("UTF-8"));
            StringBuilder hexString = new StringBuilder();
            for (byte elem : hash) {
              String hex = Integer.toHexString(0xff & elem);
              if (hex.length() == 1) hexString.append('0');
              hexString.append(hex);
            }
            return hexString.toString();
          } catch (Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    learner_created: true
  - name: src/blockchain/domain/BlockChain.java
    visible: true
    text: |
      package blockchain.domain;
      
      
      
      public class BlockChain {
          private Block head;
          private int size;
      
          public BlockChain() {
              this.head = null;
              this.size = 0;
          }
      
          public Block getHead() {
              return head;
          }
      
          public int getSize() {
              return size;
          }
      
          public void addBlock(Block block) {
              if (head == null) {
                  head = block;
              } else {
                  Block current = head;
                  while (current.getNext() != null) {
                      current = current.getNext();
                  }
                  block.setPreviousHash(current.getHash());
                  current.setNext(block);
              }
              size++;
          }
      
          public boolean isValid() {
              if (head == null) {
                  return true;
              }
              Block current = head;
              while (current.getNext() != null) {
                  if (!current.getNext().getPreviousHash().equals(current.getHash())) {
                      return false;
                  }
                  current = current.getNext();
              }
              return true;
          }
      
          @Override
          public String toString() {
              StringBuilder sb = new StringBuilder();
              Block current = head;
              while (current != null) {
                  sb.append(current).append("\n");
                  current = current.getNext();
              }
              return sb.toString();
          }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5414#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 01 Feb 2024 14:19:04 UTC"
record: 2
