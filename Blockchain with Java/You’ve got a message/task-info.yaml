type: edu
files:
  - name: src/blockchain/Main.java
    visible: true
    text: |
      package blockchain;
      
      public class Main {
          public static void main(String[] args) {
              System.out.println("Hello World!");
          }
      }
    learner_created: false
  - name: test/BlockchainTest.java
    visible: false
    text: |
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testcase.TestCase;
      
      import java.util.ArrayList;
      import java.util.List;
      import java.util.Locale;
      import java.util.Objects;
      import java.util.stream.Collectors;
      
      
      class BlockParseException extends Exception {
          BlockParseException(String msg) {
              super(msg);
          }
      }
      
      
      class Block {
      
          int id;
          long timestamp;
          long magic;
          String hashprev;
          String hash;
      
          static ArrayList<String> minerIds;
          static ArrayList<String> dataStrs;
      
      
          static Block parseBlock(String strBlock) throws BlockParseException {
              if (strBlock.length() == 0) {
                  return null;
              }
      
              if (!(strBlock.contains("Block:")
                      && strBlock.contains("Timestamp:"))) {
      
                  return null;
              }
      
              Block block = new Block();
      
              List<String> lines = strBlock
                      .lines()
                      .map(String::strip)
                      .filter(e -> e.length() > 0)
                      .collect(Collectors.toList());
      
              if (lines.size() < 12) {
                  throw new BlockParseException("Every block should " +
                          "contain at least 12 lines of data");
              }
      
              if (!lines.get(0).equals("Block:")) {
                  throw new BlockParseException("First line of every block " +
                          "should be \"Block:\"");
              }
      
              if (!lines.get(1).startsWith("Created by")) {
                  throw new BlockParseException("Second line of every block " +
                          "should start with \"Created by\"");
              }
      
              minerIds.add(lines.get(1));
      
              if (!lines.get(2).startsWith("Id:")) {
                  throw new BlockParseException("Third line of every block " +
                          "should start with \"Id:\"");
              }
      
              String id = lines.get(2).split(":")[1]
                      .strip().replace("-", "");
              boolean isNumeric = id.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Id should be a number");
              }
      
              block.id = Integer.parseInt(id);
      
      
      
              if (!lines.get(3).startsWith("Timestamp:")) {
                  throw new BlockParseException("4-th line of every block " +
                          "should start with \"Timestamp:\"");
              }
      
              String timestamp = lines.get(3).split(":")[1]
                      .strip().replace("-", "");
              isNumeric = timestamp.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Timestamp should be a number");
              }
      
              block.timestamp = Long.parseLong(timestamp);
      
      
              if (!lines.get(4).startsWith("Magic number:")) {
                  throw new BlockParseException("5-th line of every block " +
                          "should start with \"Magic number:\"");
              }
      
              String magic = lines.get(4).split(":")[1]
                      .strip().replace("-", "");
              isNumeric = magic.chars().allMatch(Character::isDigit);
      
              if (!isNumeric) {
                  throw new BlockParseException("Magic number should be a number");
              }
      
              block.magic = Long.parseLong(magic);
      
      
      
              if (!lines.get(5).equals("Hash of the previous block:")) {
                  throw new BlockParseException("6-th line of every block " +
                          "should be \"Hash of the previous block:\"");
              }
      
              if (!lines.get(7).equals("Hash of the block:")) {
                  throw new BlockParseException("8-th line of every block " +
                          "should be \"Hash of the block:\"");
              }
      
              String prevhash = lines.get(6).strip();
              String hash = lines.get(8).strip();
      
              if (!(prevhash.length() == 64 || prevhash.equals("0"))
                      || !(hash.length() == 64)) {
      
                  throw new BlockParseException("Hash length should " +
                          "be equal to 64 except \"0\"");
              }
      
              block.hash = hash;
              block.hashprev = prevhash;
      
              if (!lines.get(9).startsWith("Block data:")) {
                  throw new BlockParseException("10-th line of every block " +
                          "should start with \"Block data:\"");
              }
      
              int i;
              StringBuilder dataStr = new StringBuilder(lines.get(9));
              for (i=10; i < lines.size(); i++){
                  if (lines.get(i).toLowerCase().contains("block") && lines.get(i).toLowerCase().contains("generating")){
                      break;
                  }
                  dataStr.append(lines.get(i));
              }
              dataStrs.add(dataStr.toString());
      
              if (!lines.get(i).toLowerCase().contains("block") && !lines.get(i).toLowerCase().contains("generating")){
                  throw new BlockParseException("Second-last line of every block " +
                          "should say how long the block was generating for! (Use the example's format)");
              }
      
              if (i + 1 >= lines.size()){
                  throw new BlockParseException("There should be two lines after the block data.. " +
                          "one for generating time and one for N's status update.");
              }
      
              if (!lines.get(i+1).toUpperCase().startsWith("N ")) {
                  throw new BlockParseException("11-th line of every block " +
                          "should be state what happened to N in the format given.");
              }
      
              return block;
          }
      
      
          static List<Block> parseBlocks(String output) throws BlockParseException {
              minerIds = new ArrayList<String>();
              dataStrs = new ArrayList<String>();
      
              String[] strBlocks = output.split("\n\n");
      
              List<Block> blocks = new ArrayList<>();
      
              for (String strBlock : strBlocks) {
                  Block block = parseBlock(strBlock.strip());
                  if (block != null) {
                      blocks.add(block);
                  }
              }
      
              String firstMiner = minerIds.get(0);
              minerIds.removeIf(s -> Objects.equals(s, firstMiner));
              if (minerIds.size() == 0){
                  throw new BlockParseException("All blocks are mined by a single miner!");
              }
      
              String firstData = dataStrs.get(0);
              dataStrs.removeIf(s -> Objects.equals(s, firstData));
              if (dataStrs.size() == 0){
                  throw new BlockParseException("All blocks contain the same data!");
              }
      
              return blocks;
          }
      }
      
      class Clue {
          String zeros;
          Clue(int n) {
              zeros = "0".repeat(n);
          }
      }
      
      
      public class BlockchainTest extends StageTest<Clue> {
      
          List<String> previousOutputs = new ArrayList<>();
      
          @Override
          public List<TestCase<Clue>> generate() {
              return List.of(
                      new TestCase<>(),
                      new TestCase<>()
              );
          }
      
          @Override
          public CheckResult check(String reply, Clue clue) {
      
              if (previousOutputs.contains(reply)) {
                  return new CheckResult(false,
                          "You already printed this text in the previous tests");
              }
      
              previousOutputs.add(reply);
      
              List<Block> blocks;
              try {
                  blocks = Block.parseBlocks(reply);
              } catch (BlockParseException ex) {
                  return new CheckResult(false, ex.getMessage());
              } catch (Exception ex) {
                  return CheckResult.wrong("");
              }
      
              if (blocks.size() != 5) {
                  return new CheckResult(false,
                          "You should output 5 blocks, found " + blocks.size());
              }
      
              for (int i = 1; i < blocks.size(); i++) {
                  Block curr = blocks.get(i - 1);
                  Block next = blocks.get(i);
      
                  if (curr.id + 1 != next.id) {
                      return new CheckResult(false,
                              "Id`s of blocks should increase by 1");
                  }
      
                  if (next.timestamp < curr.timestamp) {
                      return new CheckResult(false,
                              "Timestamp`s of blocks should increase");
                  }
      
                  if (!next.hashprev.equals(curr.hash)) {
                      return new CheckResult(false, "Two hashes aren't equal, " +
                              "but should");
                  }
              }
      
      
              return CheckResult.correct();
          }
      }
    learner_created: false
  - name: src/blockchain/domain/Block.java
    visible: true
    text: |
      package blockchain.domain;
      
      import blockchain.utils.StringUtil;
      import java.sql.Timestamp;
      import java.time.Instant;
      
      /** Class representing a block in the blockchain. */
      public class Block {
        private int id;
        private long timeStamp;
        private String hash;
        private String previousHash;
        private int magicNumber;
        private int minerId;
        private int duration;
        private Block next;
      
        public Block(int id, String hash, String previousHash, int magicNumber, int minerId) {
          this.id = id;
          this.timeStamp = Timestamp.from(Instant.now()).getTime();
          this.hash = hash;
          this.previousHash = previousHash;
          this.magicNumber = magicNumber;
          this.minerId = minerId;
          this.next = null;
        }
      
        public int getId() {
          return id;
        }
      
        public String getHash() {
          return hash;
        }
      
        public String getPreviousHash() {
          return previousHash;
        }
      
        public int getDuration() {
          return duration;
        }
      
        public Block getNext() {
          return next;
        }
      
        public void setNext(Block next) {
          this.next = next;
        }
      
        public void setDuration(int duration) {
          this.duration = duration;
        }
      
        public void mineBlock(int prefix) {
      
          String prefixString = new String(new char[prefix]).replace('\0', '0');
          do {
            magicNumber++;
            hash = StringUtil.applySha256(id + timeStamp + previousHash + magicNumber + minerId);
          } while (!hash.substring(0, prefix).equals(prefixString));
        }
      
        @Override
        public String toString() {
          return String.format(
              "Block:\nCreated by miner # %d\nId: %d\nTimestamp: %d\nMagic number: %d\nHash of the previous block:\n%s\nHash of the block:\n%s\nBlock was generating for %d seconds\nN was increased to %s\n\n",
              minerId, id, timeStamp, magicNumber, previousHash, hash, duration, BlockChain.difficulty);
        }
      }
    learner_created: true
  - name: src/blockchain/utils/StringUtil.java
    visible: true
    text: |
      package blockchain.utils;
      
      import java.security.MessageDigest;
      
      public class StringUtil {
        public static String applySha256(String input) {
          try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(input.getBytes("UTF-8"));
            StringBuilder hexString = new StringBuilder();
            for (byte elem : hash) {
              String hex = Integer.toHexString(0xff & elem);
              if (hex.length() == 1) hexString.append('0');
              hexString.append(hex);
            }
            return hexString.toString();
          } catch (Exception e) {
            throw new RuntimeException(e);
          }
        }
      }
    learner_created: true
  - name: src/blockchain/domain/BlockChain.java
    visible: true
    text: |
      package blockchain.domain;
      
      import java.util.concurrent.locks.ReentrantLock;
      
      public class BlockChain {
        private volatile Block head;
        private volatile int size;
        public static volatile int difficulty = 0;
      
        private final ReentrantLock lock = new ReentrantLock();
        private final Object monitor = new Object();
      
        public BlockChain() {
          this.head = null;
          this.size = 0;
        }
      
        public Block getHead() {
          return head;
        }
      
        public int getSize() {
          return size;
        }
      
        public boolean addBlock(Block block) {
          lock.lock();
          try {
            if (head == null) {
              head = block;
            } else {
              Block current = head;
              while (current.getNext() != null) {
                current = current.getNext();
              }
      
      
              if (block.getId() == size + 1 && block.getPreviousHash().equals(current.getHash())) {
                current.setNext(block);
              } else {
                return false;
              }
            }
            size++;
            adjustDifficulty(block.getDuration());
      
            synchronized (monitor) {
              monitor.notifyAll();
            }
      
            return true;
          } finally {
            lock.unlock();
          }
        }
      
      
        public void waitForBlocks(int numberOfBlocks) {
          synchronized (monitor) {
            while (size < numberOfBlocks) {
              try {
                monitor.wait();
              } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Interrupted while waiting for blocks to be added");
              }
            }
          }
        }
      
        private void adjustDifficulty(long duration) {
          if (duration < 10) {
            difficulty++;
          } else if (duration > 60) {
            difficulty--;
            difficulty = Math.max(difficulty, 0);
          }
        }
      
        public boolean isValid() {
          if (head == null) {
            return true;
          }
          Block current = head;
          while (current.getNext() != null) {
            if (!current.getNext().getPreviousHash().equals(current.getHash())) {
              return false;
            }
            current = current.getNext();
          }
          return true;
        }
      
        public Object getMonitor() {
          return monitor;
        }
      
        @Override
        public String toString() {
          StringBuilder sb = new StringBuilder();
          Block current = head;
          while (current != null) {
            sb.append(current).append("\n");
            current = current.getNext();
          }
          return sb.toString();
        }
      }
    learner_created: true
  - name: src/blockchain/domain/Miner.java
    visible: true
    text: |
      package blockchain.domain;
      
      import blockchain.utils.StringUtil;
      
      public class Miner implements Runnable {
        private final int minerId;
        private final BlockChain blockChain;
      
        public Miner(int minerId, BlockChain blockChain) {
          this.minerId = minerId;
          this.blockChain = blockChain;
        }
      
        @Override
        public void run() {
          while (true) {
            int nextId = blockChain.getSize() + 1;
            Block newBlock = mineNewBlock(nextId);
            boolean added = blockChain.addBlock(newBlock);
            if (added) {
              synchronized (blockChain.getMonitor()) {
                blockChain.getMonitor().notifyAll();
              }
            }
            if (nextId >= 5) break;
          }
        }
      
        private String getPreviousHash() {
          Block current = blockChain.getHead();
          while (current.getNext() != null) {
            current = current.getNext();
          }
          return current.getHash();
        }
      
        private Block mineNewBlock(int nextId) {
          String previousHash = blockChain.getHead() == null ? "0" : getPreviousHash();
          long startTime = System.currentTimeMillis();
      
          Block newBlock =
              new Block(nextId, StringUtil.applySha256("Block " + nextId), previousHash, 0, minerId);
          newBlock.mineBlock(BlockChain.difficulty);
      
          long endTime = System.currentTimeMillis();
          newBlock.setDuration((int) (endTime - startTime) / 1000);
          return newBlock;
        }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/5416#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 07 Feb 2024 10:52:14 UTC"
record: 4
